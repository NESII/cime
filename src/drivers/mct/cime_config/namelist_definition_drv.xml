<?xml version="1.0"?>

<?xml-stylesheet type="text/xsl" href="namelist_definition.xsl"?>

<entry_id version="2.0">

  <!-- Each namelist variable is defined in an <entry> element.  The
     content of the element is the documentation of how the variable is
     used.  Other elements  are:
     id
          The variable's name.  *** N.B. *** The name must be lower case.
          The module convert all namelist variable names to lower case
          since Fortran is case insensitive.
     type
          An abbreviation of the fortran declaration for the variable.
	  Valid declarations are:
             char, integer, logical, real
	  Any of these types may be followed by a comma separated list of
	  integers enclosed in parenthesis to indicate an array.
	  The current namelist validation code only distinquishes between
	  string and non-string types.
     input_pathname
          Only include this attribute to indicate that the variable
          contains the pathname of an input dataset that resides in the
          CIME inputdata directory tree.

	  The recognized values are
           "abs"  - an absolute  pathname is required
	   "rel:var_name"  - the  pathname is relative and that
            the namelist variable "var_name" contains the absolute
	    root directory.
           "mapping" - the absolute inputdata path is specified and
            will be included in the cpl.inputdata_list
     category
          A category assigned for organizing the documentation.
     group
          The namelist group that the variable is declared in.
     valid_values
          This is an optional attribute that is mainly useful for variables
          that have only a small number of allowed values.
  -->

  <!-- =========================== -->
  <!-- group seq_cplflds_inparm    -->
  <!-- =========================== -->

  <entry id="flds_co2a">
    <type>logical</type>
    <category>seq_flds</category>
    <group>seq_cplflds_inparm</group>
    <desc>
      Previously, new fields that were needed to be passed between components
      for certain compsets were specified by cpp-variables. This has been
      modified to now be use cases. This use cases are specified in the
      namelist cpl_flds_inparm and are currently triggered by the xml variable CCSM_BGC.
      If CCSM_BGC is set to 'CO2A', then flds_co2a will be set to .true.
    </desc>
    <values>
      <value>.false.</value>
      <value BGC_MODE="CO2A">.true.</value>
    </values>
  </entry>

  <entry id="flds_co2b">
    <type>logical</type>
    <category>seq_flds</category>
    <group>seq_cplflds_inparm</group>
    <desc>
      Previously, new fields that were needed to be passed between components
      for certain compsets were specified by cpp-variables. This has been
      modified to now be use cases. This use cases are specified in the
      namelist cpl_flds_inparm and are currently triggered by the xml variable CCSM_BGC.
      If CCSM_BGC is set to 'CO2B', then flds_co2b will be set to .true.
    </desc>
    <values>
      <value>.false.</value>
      <value BGC_MODE="CO2B">.true.</value>
    </values>
  </entry>

  <entry id="flds_co2c">
    <type>logical</type>
    <category>seq_flds</category>
    <group>seq_cplflds_inparm</group>
    <desc>
      Previously, new fields that were needed to be passed between components
      for certain compsets were specified by cpp-variables. This has been
      modified to now be use cases. This use cases are specified in the
      namelist cpl_flds_inparm and are currently triggered by the xml variable CCSM_BGC.
      If CCSM_BGC is set to 'CO2C', then flds_co2c will be set to .true.
    </desc>
    <values>
      <value>.false.</value>
      <value BGC_MODE="CO2C">.true.</value>
    </values>
  </entry>

  <entry id="flds_co2_dmsa">
    <type>logical</type>
    <category>seq_flds</category>
    <group>seq_cplflds_inparm</group>
    <desc>
      Previously, new fields that were needed to be passed between components
      for certain compsets were specified by cpp-variables. This has been
      modified to now be use cases. This use cases are specified in the
      namelist cpl_flds_inparm and are currently triggered by the xml variable CCSM_BGC.
      If CCSM_BGC is set to 'CO2_DMSA', then flds_co2_dmsa will be set to .true.
    </desc>
    <values>
      <value>.false.</value>
      <value BGC_MODE="CO2_DMSA">.true.</value>
    </values>
  </entry>

  <entry id="flds_bgc">
    <type>logical</type>
    <category>seq_flds</category>
    <group>seq_cplflds_inparm</group>
    <desc>
      Previously, new fields that were needed to be passed between components
      for certain compsets were specified by cpp-variables. This has been
      modified to now be use cases. This use cases are specified in the
      namelist cpl_flds_inparm and are currently triggered by the xml variable ACME_BGC.
      This is a new master switch for turning ACME BGC off and on, just for testing.
      If ACME_BGC is set to 'TRUE', then flds_bgc will be set to .true.
    </desc>
    <values>
      <value>.false.</value>
    </values>
  </entry>

  <entry  id="flds_wiso" modify_via_xml="FLDS_WISO">
    <type>logical</type>
    <category>seq_flds</category>
    <group>seq_cplflds_inparm</group>
    <desc>
      Pass water isotopes between components
    </desc>
    <values>
      <value>$FLDS_WISO</value>
    </values>
  </entry>

  <entry  id="glc_nec" modify_via_xml="GLC_NEC">
    <type>integer</type>
    <category>seq_flds</category>
    <group>seq_cplflds_inparm</group>
    <desc>
      Number of cism elevation classes. Set by the xml variable GLC_NEC in env_run.xml
    </desc>
    <values>
      <value>$GLC_NEC</value>
    </values>
  </entry>

  <entry id="ice_ncat" modify_via_xml="ICE_NCAT">
    <type>integer</type>
    <category>seq_flds</category>
    <group>seq_cplflds_inparm</group>
    <desc>
      Number of sea ice thickness categories. Set by the xml variable ICE_NCAT in env_build.xml
    </desc>
    <values>
      <value>$ICE_NCAT</value>
    </values>
  </entry>

  <entry id="seq_flds_i2o_per_cat" modify_via_xml="CPL_I2O_PER_CAT">
    <type>logical</type>
    <category>seq_flds</category>
    <group>seq_cplflds_inparm</group>
    <desc>
      .true. if select per ice thickness category fields are passed to the ocean.
      Set by the xml variable CPL_I2O_PER_CAT in env_run.xml
    </desc>
    <values>
      <value>$CPL_I2O_PER_CAT</value>
    </values>
  </entry>

  <!-- =========================== -->
  <!-- -group seq_cplflds_custom   -->
  <!-- =========================== -->

  <entry id="cplflds_custom">
    <type>char(200)</type>
    <category>seq_flds</category>
    <group>seq_cplflds_userspec</group>
    <desc>
      New fields that are user specidied can be added as namelist variables
      by the user in the cpl namelist seq_flds_user using the namelist variable
      array cplflds_customs. The user specified new fields must follow the
      above naming convention.
      As an example, say you want to add a new state 'foo' that is passed
      from the land to the atm - you would do this as follows
      &amp;seq_flds_user
      cplflds_custom = 'Sa_foo->a2x', 'Sa_foo->x2a'
      /
      This would add the field 'Sa_foo' to the character strings defining the
      attribute vectors a2x and x2a. It is assumed that code would need to be
      introduced in the atm and land components to deal with this new attribute
      vector field.
      Modify user_nl_cpl to edit this.
    </desc>
    <values>
      <value>''</value>
    </values>
  </entry>

  <!-- =========================== -->
  <!-- group seq_timemgr_inparm    -->
  <!-- =========================== -->

  <entry id="atm_cpl_dt" modify_via_xml="ATM_NCPL" skip_default_entry="true">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      atm coupling interval in seconds
      set via ATM_NCPL in env_run.xml.
      ATM_NCPL is the number of times the atm is coupled per NCPL_BASE_PERIOD
      NCPL_BASE_PERIOD is also set in env_run.xml and is the base period
      associated with NCPL coupling frequency, and has valid values: hour,day,year,decade
    </desc>
  </entry>

  <entry id="lnd_cpl_dt" modify_via_xml="LND_NCPL" skip_default_entry="true">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      lnd coupling interval in seconds
      set via LND_NCPL in env_run.xml.
      LND_NCPL is the number of times the lnd is coupled per NCPL_BASE_PERIOD
      NCPL_BASE_PERIOD is also set in env_run.xml and is the base period
      associated with NCPL coupling frequency, nad has valid values: hour,day,year,decade
    </desc>
  </entry>

  <entry id="rof_cpl_dt" modify_via_xml="ROF_NCPL" skip_default_entry="true">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      river runoff coupling interval in seconds
      currently set by default to 10800 seconds.
      default: 10800
    </desc>
  </entry>

  <entry id="ice_cpl_dt" modify_via_xml="ICE_NCPL" skip_default_entry="true">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      ice coupling interval in seconds
      set via ICE_NCPL in env_run.xml.
      ICE_NCPL is the number of times the ice is coupled per NCPL_BASE_PERIOD
      NCPL_BASE_PERIOD is also set in env_run.xml and is the base period
      associated with NCPL coupling frequency, nad has valid values: hour,day,year,decade
    </desc>
  </entry>

  <entry id="ocn_cpl_dt" modify_via_xml="OCN_NCPL" skip_default_entry="true">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      ocn coupling interval in seconds
      set via OCN_NCPL in env_run.xml.
      OCN_NCPL is the number of times the ocn is coupled per NCPL_BASE_PERIOD
      NCPL_BASE_PERIOD is also set in env_run.xml and is the base period
      associated with NCPL coupling frequency, nad has valid values: hour,day,year,decade
    </desc>
  </entry>

  <entry id="glc_cpl_dt" modify_via_xml="GLC_NCPL" skip_default_entry="true">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      glc coupling interval in seconds
      set via GLC_NCPL in env_run.xml.
      GLC_NCPL is the number of times the glc is coupled per NCPL_BASE_PERIOD
      NCPL_BASE_PERIOD is also set in env_run.xml and is the base period
      associated with NCPL coupling frequency, nad has valid values: hour,day,year,decade
    </desc>
  </entry>

  <entry id="glc_avg_period" modify_via_xml="GLC_AVG_PERIOD">
    <type>char</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <valid_values>glc_coupling_period,yearly</valid_values>
    <values>
      <value>$GLC_AVG_PERIOD</value>
    </values>
    <desc>
      Period at which coupler averages fields sent to GLC.
      This supports doing the averaging to GLC less frequently than GLC is called
      (i.e., separating the averaging frequency from the calling frequency).
      This is useful because there are benefits to only averaging the GLC inputs
      as frequently as they are really needed (yearly for CISM), but GLC needs to
      still be called more frequently than that in order to support mid-year restarts.

      Setting glc_avg_period to 'glc_coupling_period' means that the averaging is
      done exactly when the GLC is called (governed by GLC_NCPL).
    </desc>
  </entry>

  <entry id="wav_cpl_dt" modify_via_xml="WAV_NCPL" skip_default_entry="true">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      wav coupling interval in seconds
      set via WAV_NCPL in env_run.xml.
      WAV_NCPL is the number of times the wav is coupled per NCPL_BASE_PERIOD
      NCPL_BASE_PERIOD is also set in env_run.xml and is the base period
      associated with NCPL coupling frequency, nad has valid values: hour,day,year,decade
    </desc>
  </entry>

  <entry id="esp_cpl_dt" skip_default_entry="true">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      esp run interval in seconds
      esp_cpl_dt is the number of times the esp is run per NCPL_BASE_PERIOD
      NCPL_BASE_PERIOD is set in env_run.xml and is the base period
      associated with NCPL coupling frequency, nad has valid values: hour,day,year,decade
      default value set by buildnml to be the pause interval if pause is active
      otherwise, it is set to the shortest component coupling time
    </desc>
    <values>
      <value>-999</value>
    </values>
  </entry>

  <entry id="atm_cpl_offset">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      atm coupling interval offset in seconds default: 0
    </desc>
    <values>
      <value>0</value>
    </values>
  </entry>

  <entry id="lnd_cpl_offset">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      lnd coupling interval offset in seconds default: 0
    </desc>
    <values>
      <value>0</value>
    </values>
  </entry>

  <entry id="ice_cpl_offset">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      ice coupling interval offset in seconds default: 0
    </desc>
    <values>
      <value>0</value>
    </values>
  </entry>

  <entry id="ocn_cpl_offset">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      ocn coupling interval offset in seconds default: 0
    </desc>
    <values>
      <value>0</value>
    </values>
  </entry>

  <entry id="glc_cpl_offset">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      glc coupling interval offset in seconds default: 0
    </desc>
    <values>
      <value>0</value>
    </values>
  </entry>

  <entry id="wav_cpl_offset">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      wav coupling interval offset in seconds default: 0
    </desc>
    <values>
      <value>0</value>
    </values>
  </entry>

  <entry id="esp_cpl_offset">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      esp coupling interval offset in seconds default: 0
    </desc>
    <values>
      <value>0</value>
    </values>
  </entry>

  <entry id="esp_run_on_pause" modify_via_xml="ESP_RUN_ON_PAUSE">
    <type>logical</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      true => ESP component runs after driver 'pause cycle'
      If any component 'pauses' (see PAUSE_OPTION, PAUSE_N and
      PAUSE_COMPONENT_LIST XML variables), the ESP component (if
      present) will be run to process the component 'pause' (restart)
      files and set any required 'resume' signals.
      If true, esp_cpl_dt and esp_cpl_offset settings are ignored.
      default: true
    </desc>
    <values>
      <value>.true.</value>
    </values>
  </entry>

  <entry id="calendar" modify_via_xml="CALENDAR">
    <type>char</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <valid_values>NO_LEAP,GREGORIAN</valid_values>
    <desc>
      calendar in use.  [NO_LEAP, GREOGORIAN].
      set by CALENDAR in env_build.xml
    </desc>
    <values>
      <value>$CALENDAR</value>
    </values>
  </entry>

  <entry id="start_ymd" modify_via_xml="RUN_STARTDATE">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      Run start date in yyyymmdd format, only used for startup and hybrid runs.
      default: 00010101
    </desc>
    <values>
      <value>00010101</value>
    </values>
  </entry>

  <entry id="start_tod" modify_via_xml="START_TOD">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      Start time-of-day in universal time (seconds), should be between zero and 86400
      default: 0
    </desc>
    <values>
      <value>$START_TOD</value>
    </values>
  </entry>

  <entry id="stop_option" modify_via_xml="STOP_OPTION">
    <type>char</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <valid_values>none,never,nsteps,nstep,nseconds,nsecond,nminutes,nminute,nhours,nhour,ndays,nday,monthly,nmonths,nmonth,nyears,nyear,date,ifdays0,end</valid_values>
    <desc>
      sets the run length with stop_n and stop_ymd
      stop_option alarms are:
      [none/never], turns option off
      [nstep/s]   , stops every stop_n nsteps  , relative to current run start time
      [nsecond/s] , stops every stop_n nseconds, relative to current run start time
      [nminute/s] , stops every stop_n nminutes, relative to current run start time
      [nhour/s]   , stops every stop_n nhours  , relative to current run start time
      [nday/s]    , stops every stop_n ndays   , relative to current run start time
      [nmonth/s]  , stops every stop_n nmonths , relative to current run start time
      [monthly/s] , stops every        month   , relative to current run start time
      [nyear/s]   , stops every stop_n nyears  , relative to current run start time
      [date]      , stops at stop_ymd value
      [ifdays0]   , stops at stop_n calendar day value and seconds equal 0
      [end]       , stops at end
    </desc>
    <values>
      <value>$STOP_OPTION</value>
    </values>
  </entry>

  <entry id="stop_n" modify_via_xml="STOP_N">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      Sets the run length with stop_option and stop_ymd
    </desc>
    <values>
      <value>$STOP_N</value>
    </values>
  </entry>

  <entry id="stop_ymd" modify_via_xml="STOP_YMD">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      date in yyyymmdd format, sets the run length with stop_option and stop_n,
      can be in addition to stop_option and stop_n, negative value implies off
    </desc>
    <values>
      <value>$STOP_DATE</value>
    </values>
  </entry>

  <entry id="restart_file">
    <type>char</type>
    <category>expdef</category>
    <group>seq_infodata_inparm</group>
    <valid_values></valid_values>
    <desc>
      Driver restart filename.
      (NOTE: Normally THIS IS NOT USED -- Set with RUN_REFCASE and RUN_REFDATE)
    </desc>
    <values>
      <value>str_undefined</value>
    </values>
  </entry>

  <entry id="restart_option" modify_via_xml="REST_OPTION">
    <type>char</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <valid_values>none,never,nsteps,nstep,nseconds,nsecond,nminutes,nminute,nhours,nhour,ndays,nday,nmonths,monthly,nmonth,nyears,nyear,date,ifdays0,end</valid_values>
    <desc>
      sets the restart frequency with restart_n and restart_ymd
      restart_option alarms are:
      [none/never], turns option off
      [nstep/s]   , restarts every restart_n nsteps  , relative to current run start time
      [nsecond/s] , restarts every restart_n nseconds, relative to current run start time
      [nminute/s] , restarts every restart_n nminutes, relative to current run start time
      [nhour/s]   , restarts every restart_n nhours  , relative to current run start time
      [nday/s]    , restarts every restart_n ndays   , relative to current run start time
      [monthly/s] , restarts every           month   , relative to current run start time
      [nmonth/s]  , restarts every restart_n nmonths , relative to current run start time
      [nyear/s]   , restarts every restart_n nyears  , relative to current run start time
      [date]      , restarts at restart_ymd value
      [ifdays0]   , restarts at restart_n calendar day value and seconds equal 0
      [end]       , restarts at end
    </desc>
    <values>
      <value>$REST_OPTION</value>
    </values>
  </entry>

  <entry id="restart_n" modify_via_xml="REST_N">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      Sets model restart writes with restart_option and restart_ymd (same options as stop_n)
    </desc>
    <values>
      <value>$REST_N</value>
    </values>
  </entry>

  <entry id="restart_ymd" modify_via_xml="REST_YMD">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      Date in yyyymmdd format, sets model restart write date with rest_option and restart_n
      default: STOP_N
    </desc>
    <values>
      <value>$REST_DATE</value>
    </values>
  </entry>

  <entry id="end_restart">
    <type>logical</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      true => write restarts at end of run
      forces a restart write at the end of the run in addition to any
      setting associated with rest_option.  default=true.  this setting
      will be set to false if restart_option is none or never.
      default: false
    </desc>
    <values>
      <value>.false.</value>
    </values>
  </entry>

  <entry id="history_option" modify_via_xml="HIST_OPTION">
    <type>char</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <valid_values>none,never,nsteps,nstep,nseconds,nsecond,nminutes,nminute,nhours,nhour,ndays,nday,monthly,nmonths,nmonth,nyears,nyear,date,ifdays0,end</valid_values>
    <desc>
      coupler history snapshot option (used with history_n and history_ymd)
      set by HIST_OPTION in env_run.xml.
      history_option alarms are:
      [none/never], turns option off
      [nstep/s]   , history snapshot every history_n nsteps  , relative to current run start time
      [nsecond/s] , history snapshot every history_n nseconds, relative to current run start time
      [nminute/s] , history snapshot every history_n nminutes, relative to current run start time
      [nhour/s]   , history snapshot every history_n nhours  , relative to current run start time
      [nday/s]    , history snapshot every history_n ndays   , relative to current run start time
      [monthly/s] , history snapshot every           month   , relative to current run start time
      [nmonth/s]  , history snapshot every history_n nmonths , relative to current run start time
      [nyear/s]   , history snapshot every history_n nyears  , relative to current run start time
      [date]      , history snapshot at history_ymd value
      [ifdays0]   , history snapshot at history_n calendar day value and seconds equal 0
      [end]       , history snapshot at end
    </desc>
    <values>
      <value>$HIST_OPTION</value>
    </values>
  </entry>

  <entry id="history_n" modify_via_xml="HIST_N">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      sets coupler snapshot history file frequency (like restart_n)
      set by HIST_N in env_run.xml.
    </desc>
    <values>
      <value>$HIST_N</value>
    </values>
  </entry>

  <entry id="history_ymd" modify_via_xml="HIST_YMD">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      date associated with history_option date.  yyyymmdd format.
      set by HIST_DATE in env_run.xml.
    </desc>
    <values>
      <value>$HIST_DATE</value>
    </values>
  </entry>

  <entry id="histavg_option" modify_via_xml="HISTAVG_OPTION">
    <type>char</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <valid_values>none,never,nsteps,nstep,nseconds,nsecond,nminutes,nminute,nhours,nhour,ndays,nday,monthly,nmonths,nmonth,nyears,nyear,date,ifdays0,end</valid_values>
    <desc>
      coupler time average history option (used with histavg_n and histavg_ymd)
      set by AVGHIST_OPTION in env_run.xml.
      histavg_option alarms are:
      [none/never], turns option off
      [nstep/s]   , history snapshot every histavg_n nsteps  , relative to current run start time
      [nsecond/s] , history snapshot every histavg_n nseconds, relative to current run start time
      [nminute/s] , history snapshot every histavg_n nminutes, relative to current run start time
      [nhour/s]   , history snapshot every histavg_n nhours  , relative to current run start time
      [nday/s]    , history snapshot every histavg_n ndays   , relative to current run start time
      [monthly/s] , history snapshot every           month   , relative to current run start time
      [nmonth/s]  , history snapshot every histavg_n nmonths , relative to current run start time
      [nyear/s]   , history snapshot every histavg_n nyears  , relative to current run start time
      [date]      , history snapshot at histavg_ymd value
      [ifdays0]   , history snapshot at histavg_n calendar day value and seconds equal 0
      [end]       , history snapshot at end
    </desc>
    <values>
      <value>$AVGHIST_OPTION</value>
    </values>
  </entry>

  <entry id="histavg_n" modify_via_xml="HISTAVG_N">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      Sets coupler time-average history file frequency (like restart_option)
      set by AVGHIST_N in env_run.xml.
    </desc>
    <values>
      <value>$AVGHIST_N</value>
    </values>
  </entry>

  <entry id="histavg_ymd" modify_via_xml="HISTAVG_YMD">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      date associated with histavg_option date.  yyyymmdd format.
      set by AVGHIST_DATE in env_run.xml.
    </desc>
    <values>
      <value>$AVGHIST_DATE</value>
    </values>
  </entry>

  <entry id="barrier_option" modify_via_xml="BARRIER_OPTION">
    <type>char</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <valid_values>none,never,nsteps,nstep,nseconds,nsecond,nminutes,nminute,nhours,nhour,ndays,nday,nmonths,monthly,nmonth,nyears,nyear,date,ifdays0,end</valid_values>
    <desc>
      sets the driver barrier frequency to sync models across all tasks with barrier_n and barrier_ymd
      barrier_option alarms are like restart_option
      default: never
    </desc>
    <values>
      <value>$BARRIER_OPTION</value>
    </values>
  </entry>

  <entry id="barrier_n" modify_via_xml="BARRIER_N">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      Sets model barriers with barrier_option and barrier_ymd (same options as stop_n)
      default: 1
    </desc>
    <values>
      <value>$BARRIER_N</value>
    </values>
  </entry>

  <entry id="barrier_ymd" modify_via_xml="BARRIER_DATE">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      Date in yyyymmdd format, sets model barriers date with barrier_option and barrier_n
    </desc>
    <values>
      <value>$BARRIER_DATE</value>
    </values>
  </entry>

  <entry id="tprof_option">
    <type>char</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <valid_values>none,never,nsteps,nstep,nseconds,nsecond,nminutes,nminute,nhours,nhour,ndays,nday,monthly,nmonths,nmonth,nyears,nyear,date,ifdays0,end</valid_values>
    <desc>
      Sets timing output file frequency (like rest_option but relative to run start date)
      tprof_option alarms are:
      [none/never], turns option off
      [nstep/s]   , every tprof_n nsteps  , relative to current run start time
      [nsecond/s] , every tprof_n nseconds, relative to current run start time
      [nminute/s] , every tprof_n nminutes, relative to current run start time
      [nhour/s]   , every tprof_n nhours  , relative to current run start time
      [nday/s]    , every tprof_n ndays   , relative to current run start time
      [monthly/s] , every         month   , relative to current run start time
      [nmonth/s]  , every tprof_n nmonths , relative to current run start time
      [nyear/s]   , every tprof_n nyears  , relative to current run start time
      [date]      , at tprof_ymd value
      [ifdays0]   , at tprof_n calendar day value and seconds equal 0
      [end]       , at end
    </desc>
    <values>
      <value>never</value>
    </values>
  </entry>

  <entry id="tprof_n">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      Sets timing output file frequency (like restart_n)
    </desc>
    <values>
      <value>-999</value>
    </values>
  </entry>

  <entry id="tprof_ymd">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      yyyymmdd format, sets timing output file date (like restart_date)
    </desc>
    <values>
      <value>-999</value>
    </values>
  </entry>

  <entry id="pause_option" modify_via_xml="PAUSE_OPTION">
    <type>char</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <valid_values>none,never,nsteps,nstep,nseconds,nsecond,nminutes,nminute,nhours,nhour,ndays,nday,monthly,nmonths,nmonth,nyears,nyear</valid_values>
    <desc>
      sets the pause frequency with pause_n
      pause_option alarms are:
      [none/never], turns option off
      [nstep/s]   , pauses every pause_n nsteps  , relative to start or last pause time
      [nsecond/s] , pauses every pause_n nseconds, relative to start or last pause time
      [nminute/s] , pauses every pause_n nminutes, relative to start or last pause time
      [nhour/s]   , pauses every pause_n nhours  , relative to start or last pause time
      [nday/s]    , pauses every pause_n ndays   , relative to start or last pause time
      [nmonth/s]  , pauses every pause_n nmonths , relative to start or last pause time
      [monthly/s] , pauses every        month    , relative to start or last pause time
      [nyear/s]   , pauses every pause_n nyears  , relative to start or last pause time
    </desc>
    <values>
      <value>$PAUSE_OPTION</value>
    </values>
  </entry>

  <entry id="pause_n" modify_via_xml="PAUSE_N">
    <type>integer</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      Sets the pause frequency with pause_option
    </desc>
    <values>
      <value>$PAUSE_N</value>
    </values>
  </entry>

  <entry id="pause_component_list" modify_via_xml="PAUSE_COMPONENT_LIST" skip_default_entry="true">
    <type>char</type>
    <category>time</category>
    <group>seq_timemgr_inparm</group>
    <desc>
      A colon-separated list of component types (e.g., ocn,atm) to receive a
      resume signal after a pause has happened. Special values "all" or "none"
      may be used in place of a list
    </desc>
    <values>
      <value>$PAUSE_COMPONENT_LIST</value>
    </values>
  </entry>

  <entry id="max_cplstep_time">
    <type>real</type>
    <category>driver</category>
    <group>seq_infodata_inparm</group>
    <desc>
      Abort model if coupler timestep wallclock time exceeds this value, ignored if 0,
      if &lt; 0 then use abs(max_cplstep_time)*cktime as the threshold.
      default: 0
    </desc>
    <values>
      <value>0.0</value>
    </values>
  </entry>

  <!-- =========================== -->
  <!-- group seq_ccsm_pes          -->
  <!-- =========================== -->

  <entry id="atm_ntasks" modify_via_xml="NTASKS_ATM">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of mpi tasks assigned to the atm components.
      set by NTASKS_ATM in env_configure.xml.
    </desc>
    <values>
      <value>$NTASKS_ATM</value>
    </values>
  </entry>

  <entry id="atm_nthreads" modify_via_xml="NTHRDS_ATM">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of threads per mpi task for the atm component.
      set by NTHRDS_ATM in env_configure.xml.
    </desc>
    <values>
      <value>$NTHRDS_ATM</value>
    </values>
  </entry>

  <entry id="atm_rootpe" modify_via_xml="ROOTPE_ATM">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the global mpi task rank of the root processor assigned to the atm component.
      set by ROOTPE_ATM in env_configure.xml.
    </desc>
    <values>
      <value>$ROOTPE_ATM</value>
    </values>
  </entry>

  <entry id="atm_pestride" modify_via_xml="PSTRID_ATM">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the mpi global processors stride associated with the mpi tasks for the atm component.
      set by PSTRID_ATM in env_configure.xml.
    </desc>
    <values>
      <value>$PSTRID_ATM</value>
    </values>
  </entry>

  <entry id="atm_layout" modify_via_xml="NINST_ATM_LAYOUT">
    <type>char</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <valid_values>concurrent,sequential</valid_values>
    <desc>
      Layout of multi-instance atms (if there are more than 1)
    </desc>
    <values>
      <value>$NINST_ATM_LAYOUT</value>
    </values>
  </entry>

  <entry id="lnd_ntasks" modify_via_xml="NTASKS_LND">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of mpi tasks assigned to the lnd components.
      set by NTASKS_LND in env_configure.xml.
    </desc>
    <values>
      <value>$NTASKS_LND</value>
    </values>
  </entry>

  <entry id="lnd_nthreads" modify_via_xml="NTHRDS_LND">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of threads per mpi task for the lnd component.
      set by NTHRDS_LND in env_configure.xml.
    </desc>
    <values>
      <value>$NTHRDS_LND</value>
    </values>
  </entry>

  <entry id="lnd_rootpe" modify_via_xml="ROOTPE_LND">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the global mpi task rank of the root processor assigned to the lnd component.
      set by ROOTPE_LND in env_configure.xml.
    </desc>
    <values>
      <value>$ROOTPE_LND</value>
    </values>
  </entry>

  <entry id="lnd_pestride" modify_via_xml="PSTRID_LND">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the mpi global processors stride associated with the mpi tasks for the lnd component.
      set by PSTRID_LND in env_configure.xml.
    </desc>
    <values>
      <value>$PSTRID_LND</value>
    </values>
  </entry>

  <entry id="lnd_layout" modify_via_xml="NINST_LND_LAYOUT">
    <type>char</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <valid_values>concurrent,sequential</valid_values>
    <desc>
      Layout of multi-instance lnds (if there are more than 1)
    </desc>
    <values>
      <value>$NINST_LND_LAYOUT</value>
    </values>
  </entry>

  <entry id="ice_ntasks" modify_via_xml="NTASKS_ICE">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of mpi tasks assigned to the ice components.
      set by NTASKS_ICE in env_configure.xml.
    </desc>
    <values>
      <value>$NTASKS_ICE</value>
    </values>
  </entry>

  <entry id="ice_nthreads" modify_via_xml="NTHRDS_ICE">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of threads per mpi task for the ice component.
      set by NTHRDS_ICE in env_configure.xml.
    </desc>
    <values>
      <value>$NTHRDS_ICE</value>
    </values>
  </entry>

  <entry id="ice_rootpe" modify_via_xml="ROOTPE_ICE">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the global mpi task rank of the root processor assigned to the ice component.
      set by ROOTPE_ICE in env_configure.xml.
    </desc>
    <values>
      <value>$ROOTPE_ICE</value>
    </values>
  </entry>

  <entry id="ice_pestride" modify_via_xml="PSTRID_ICE">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the mpi global processors stride associated with the mpi tasks for the ice component.
      set by PSTRID_ICE in env_configure.xml.
    </desc>
    <values>
      <value>$PSTRID_ICE</value>
    </values>
  </entry>

  <entry id="ice_layout" modify_via_xml="NINST_ICE_LAYOUT">
    <type>char</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <valid_values>concurrent,sequential</valid_values>
    <desc>
      Layout of multi-instance ices (if there are more than 1)
    </desc>
    <values>
      <value>$NINST_ICE_LAYOUT</value>
    </values>
  </entry>

  <entry id="ocn_ntasks" modify_via_xml="NTASKS_OCN">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of mpi tasks assigned to the ocn components.
      set by NTASKS_OCN in env_configure.xml.
    </desc>
    <values>
      <value>$NTASKS_OCN</value>
    </values>
  </entry>

  <entry id="ocn_nthreads" modify_via_xml="NTHRDS_OCN">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of threads per mpi task for the ocn component.
      set by NTHRDS_OCN in env_configure.xml.
    </desc>
    <values>
      <value>$NTHRDS_OCN</value>
    </values>
  </entry>

  <entry id="ocn_rootpe" modify_via_xml="ROOTPE_OCN">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the global mpi task rank of the root processor assigned to the ocn component.
      set by ROOTPE_OCN in env_configure.xml.
    </desc>
    <values>
      <value>$ROOTPE_OCN</value>
    </values>
  </entry>

  <entry id="ocn_pestride" modify_via_xml="PSTRID_OCN">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the mpi global processors stride associated with the mpi tasks for the ocn component.
      set by PSTRID_OCN in env_configure.xml.  default: 1
    </desc>
    <values>
      <value>$PSTRID_OCN</value>
    </values>
  </entry>

  <entry id="ocn_layout" modify_via_xml="NINST_OCN_LAYOUT">
    <type>char</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <valid_values>concurrent,sequential</valid_values>
    <desc>
      Layout of multi-instance ocns (if there are more than 1)
    </desc>
    <values>
      <value>$NINST_OCN_LAYOUT</value>
    </values>
  </entry>

  <entry id="glc_ntasks" modify_via_xml="NTASKS_GLC">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of mpi tasks assigned to the glc components.
      set by NTASKS_GLC in env_configure.xml.
    </desc>
    <values>
      <value>$NTASKS_GLC</value>
    </values>
  </entry>

  <entry id="glc_nthreads" modify_via_xml="NTHRDS_GLC">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of threads per mpi task for the glc component.
      set by NTHRDS_GLC in env_configure.xml.
    </desc>
    <values>
      <value>$NTHRDS_GLC</value>
    </values>
  </entry>

  <entry id="glc_rootpe" modify_via_xml="ROOTPE_GLC">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the global mpi task rank of the root processor assigned to the glc component.
      set by ROOTPE_GLC in env_configure.xml.
    </desc>
    <values>
      <value>$ROOTPE_GLC</value>
    </values>
  </entry>

  <entry id="glc_pestride" modify_via_xml="PSTRID_GLC">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the mpi global processors stride associated with the mpi tasks for the glc component.
      set by PSTRID_GLC in env_configure.xml.
    </desc>
    <values>
      <value>$PSTRID_GLC</value>
    </values>
  </entry>

  <entry id="glc_layout" modify_via_xml="NINST_GLC_LAYOUT">
    <type>char</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <valid_values>concurrent,sequential</valid_values>
    <desc>
      Layout of multi-instance glcs (if there are more than 1)
    </desc>
    <values>
      <value>$NINST_GLC_LAYOUT</value>
    </values>
  </entry>

  <entry id="wav_ntasks" modify_via_xml="NTASKS_WAV">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of mpi tasks assigned to the wav components.
      set by NTASKS_WAV in env_configure.xml.
    </desc>
    <values>
      <value>$NTASKS_WAV</value>
    </values>
  </entry>

  <entry id="wav_nthreads" modify_via_xml="NTHRDS_WAV">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of threads per mpi task for the wav component.
      set by NTHRDS_WAV in env_configure.xml.
    </desc>
    <values>
      <value>$NTHRDS_WAV</value>
    </values>
  </entry>

  <entry id="wav_rootpe" modify_via_xml="ROOTPE_WAV">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the global mpi task rank of the root processor assigned to the wav component.
      set by ROOTPE_WAV in env_configure.xml.
    </desc>
    <values>
      <value>$ROOTPE_WAV</value>
    </values>
  </entry>

  <entry id="wav_pestride" modify_via_xml="PSTRID_WAV">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the mpi global processors stride associated with the mpi tasks for the wav component.
      set by PSTRID_WAV in env_configure.xml.
    </desc>
    <values>
      <value>$PSTRID_WAV</value>
    </values>
  </entry>

  <entry id="wav_layout" modify_via_xml="NINST_WAV_LAYOUT">
    <type>char</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <valid_values>concurrent,sequential</valid_values>
    <desc>
      Layout of multi-instance wavs (if there are more than 1)
    </desc>
    <values>
      <value>$NINST_WAV_LAYOUT</value>
    </values>
  </entry>

  <entry id="rof_ntasks" modify_via_xml="NTASKS_ROF">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of mpi tasks assigned to the lnd components.
      set by NTASKS_LND in env_configure.xml.
    </desc>
    <values>
      <value>$NTASKS_ROF</value>
    </values>
  </entry>

  <entry id="rof_nthreads" modify_via_xml="NTHRDS_ROF">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of threads per mpi task for the lnd component.
      set by NTHRDS_ROF in env_configure.xml.
    </desc>
    <values>
      <value>$NTHRDS_ROF</value>
    </values>
  </entry>

  <entry id="rof_rootpe" modify_via_xml="ROOTPE_ROF">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the global mpi task rank of the root processor assigned to the lnd component.
      set by ROOTPE_LND in env_configure.xml.
    </desc>
    <values>
      <value>$ROOTPE_ROF</value>
    </values>
  </entry>

  <entry id="rof_pestride" modify_via_xml="PSTRID_ROF">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the mpi global processors stride associated with the mpi tasks for the lnd component.
      set by PSTRID_LND in env_configure.xml.
    </desc>
    <values>
      <value>$PSTRID_ROF</value>
    </values>
  </entry>

  <entry id="rof_layout" modify_via_xml="NINST_ROF_LAYOUT">
    <type>char</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <valid_values>concurrent,sequential</valid_values>
    <desc>
      Layout of multi-instance lnds (if there are more than 1)
    </desc>
    <values>
      <value>$NINST_ROF_LAYOUT</value>
    </values>
  </entry>

  <entry id="esp_ntasks" modify_via_xml="NTASKS_ESP">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of mpi tasks assigned to the esp components.
      set by NTASKS_ESP in env_configure.xml.
    </desc>
    <values>
      <value>$NTASKS_ESP</value>
    </values>
  </entry>

  <entry  id="esp_nthreads" modify_via_xml="NTHRDS_ESP">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of threads per mpi task for the esp component.
      set by NTHRDS_ESP in env_configure.xml.
    </desc>
    <values>
      <value>$NTHRDS_ESP</value>
    </values>
  </entry>

  <entry  id="esp_rootpe" modify_via_xml="ROOTPE_ESP">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the global mpi task rank of the root processor assigned to the esp component.
      set by ROOTPE_ESP in env_configure.xml.
    </desc>
    <values>
      <value>$ROOTPE_ESP</value>
    </values>
  </entry>

  <entry  id="esp_pestride" modify_via_xml="PSTRID_ESP">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the mpi global processors stride associated with the mpi tasks for the esp component.
      set by PSTRID_ESP in env_configure.xml.
    </desc>
    <values>
      <value>$PSTRID_ESP</value>
    </values>
  </entry>

  <entry  id="esp_layout" modify_via_xml="NINST_ESP_LAYOUT">
    <type>char</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <valid_values>concurrent,sequential</valid_values>
    <desc>
      Layout of multi-instance external system processor (if there are more than 1)
    </desc>
    <values>
      <value>$NINST_ESP_LAYOUT</value>
    </values>
  </entry>

  <entry  id="cpl_ntasks" modify_via_xml="NTASKS_CPL">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of mpi tasks assigned to the cpl components.
      set by NTASKS_CPL in env_configure.xml.
    </desc>
    <values>
      <value>$NTASKS_CPL</value>
    </values>
  </entry>

  <entry id="cpl_nthreads" modify_via_xml="NTHRDS_CPL">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the number of threads per mpi task for the cpl component.
      set by NTHRDS_CPL in env_configure.xml.
    </desc>
    <values>
      <value>$NTHRDS_CPL</value>
    </values>
  </entry>

  <entry id="cpl_rootpe" modify_via_xml="ROOTPE_CPL">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the global mpi task rank of the root processor assigned to the cpl component.
      set by ROOTPE_CPL in env_configure.xml.
    </desc>
    <values>
      <value>$ROOTPE_CPL</value>
    </values>
  </entry>

  <entry id="cpl_pestride" modify_via_xml="PSTRID_CPL">
    <type>integer</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      the mpi global processors stride associated with the mpi tasks for the cpl component.
      set by PSTRID_CPL in env_configure.xml.
    </desc>
    <values>
      <value>$PSTRID_CPL</value>
    </values>
  </entry>

  <entry id="esmf_logging" modify_via_xml="ESMF_LOGFILE_KIND">
    <type>char</type>
    <category>ccsm_pes</category>
    <group>ccsm_pes</group>
    <desc>
      Determines what ESMF log files (if any) are generated when
          USE_ESMF_LIB is TRUE. 
      ESMF_LOGKIND_SINGLE: Use a single log file, combining messages from
          all of the PETs. Not supported on some platforms.
      ESMF_LOGKIND_MULTI: Use multiple log files — one per PET.
      ESMF_LOGKIND_NONE: Do not issue messages to a log file.
      By default, no ESMF log files are generated.
    </desc>
    <values>
      <value>$ESMF_LOGFILE_KIND</value>
    </values>
  </entry>

  <!-- =========================== -->
  <!-- group prof_inparm           -->
  <!--  in perf_mod.F90            -->
  <!-- =========================== -->

  <entry id="profile_global_stats">
    <type>logical</type>
    <category>performance</category>
    <group>prof_inparm</group>
    <desc>
    </desc>
    <values>
      <value>.true.</value>
    </values>
  </entry>

  <entry id="profile_single_file">
    <type>logical</type>
    <category>performance</category>
    <group>prof_inparm</group>
    <desc>
    </desc>
    <values>
      <value>.false.</value>
    </values>
  </entry>

  <entry id="profile_disable">
    <type>logical</type>
    <category>performance</category>
    <group>prof_inparm</group>
    <desc>
    </desc>
    <values>
      <value timer_level='pos'>.false.</value>
      <value timer_level='neg'>.true.</value>
    </values>
  </entry>

  <entry id="profile_barrier">
    <type>logical</type>
    <category>performance</category>
    <group>prof_inparm</group>
    <desc>
    </desc>
    <values>
      <value>.false.</value>
    </values>
  </entry>

  <entry id="profile_depth_limit" modify_via_xml="TIMER_LEVEL">
    <type>integer</type>
    <category>performance</category>
    <group>prof_inparm</group>
    <desc>
    </desc>
    <values>
      <value>$TIMER_LEVEL</value>
    </values>
  </entry>

  <entry id="profile_outpe_stride">
    <type>integer</type>
    <category>performance</category>
    <group>prof_inparm</group>
    <desc>
    </desc>
    <values>
      <value>0</value>
    </values>
  </entry>

  <entry id="profile_detail_limit"   modify_via_xml="TIMER_DETAIL">
    <type>integer</type>
    <category>performance</category>
    <group>prof_inparm</group>
    <desc>
    </desc>
    <values>
      <value>$TIMER_DETAIL</value>
    </values>
  </entry>

  <entry id="profile_timer">
    <type>integer</type>
    <category>performance</category>
    <group>prof_inparm</group>
    <desc>
    </desc>
    <values>
      <value>4</value> <!-- mpiwtime -->
      <value MACH="yellowstone">2</value> <!-- nanotime -->
      <value MPILIB="mpi-serial">1</value> <!-- gettimeofday -->
      <value MPILIB="mpi-serial" OS="AIX">3</value> <!-- read_real_time -->
    </values>
  </entry>

  <entry id="profile_ovhd_measurement">
    <type>logical</type>
    <category>performance</category>
    <group>prof_inparm</group>
    <desc>
      default: .false.
    </desc>
    <values>
      <value>.false.</value>
    </values>
  </entry>

  <entry id="profile_add_detail">
    <type>logical</type>
    <category>performance</category>
    <group>prof_inparm</group>
    <desc>
      default: .false.
    </desc>
    <values>
      <value>.false.</value>
    </values>
  </entry>

  <entry  id="profile_outpe_num">
    <type>integer</type>
    <category>performance</category>
    <group>prof_inparm</group>
    <desc>
      default: 1
    </desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="profile_papi_enable" modify_via_xml="PROFILE_PAPI_ENABLE">
    <type>logical</type>
    <category>performance</category>
    <group>prof_inparm</group>
    <desc>
      default: .false.
    </desc>
    <values>
      <value>$PROFILE_PAPI_ENABLE</value>
    </values>
  </entry>

  <!-- =========================== -->
  <!-- group papi_inparm           -->
  <!--  in perf_mod.F90            -->
  <!-- =========================== -->

  <entry id="papi_ctr1_str">
    <type>char</type>
    <category>performance</category>
    <group>papi_inparm</group>
    <desc>
      See gptl_papi.c for the list of valid values
    </desc>
    <values>
      <value>PAPI_FP_OPS</value>
    </values>
  </entry>

  <entry id="papi_ctr2_str">
    <type>char</type>
    <category>performance</category>
    <group>papi_inparm</group>
    <desc>
      See gptl_papi.c for the list of valid values
    </desc>
    <values>
      <value>PAPI_NO_CTR</value>
    </values>
  </entry>

  <entry id="papi_ctr3_str">
    <type>char</type>
    <category>performance</category>
    <group>papi_inparm</group>
    <desc>
      See gptl_papi.c for the list of valid values
    </desc>
    <values>
      <value>PAPI_NO_CTR</value>
    </values>
  </entry>

  <entry id="papi_ctr4_str">
    <type>char</type>
    <category>performance</category>
    <group>papi_inparm</group>
    <desc>
      See gptl_papi.c for the list of valid values
    </desc>
    <values>
      <value>PAPI_NO_CTR</value>
    </values>
  </entry>

  <!-- =========================== -->
  <!-- group pio_default_inparm    -->
  <!-- =========================== -->

  <entry id="pio_async_interface">
    <type>logical</type>
    <category>pio</category>
    <group>pio_default_inparm</group>
    <desc>
      future asynchronous IO capability (not currently supported).
      If pio_async_interface is .true. or {component}_PIO_* variable is not set or set to -99
      the component variable will be set using the pio_* value.
      default: .false.
    </desc>
    <values>
      <value>$PIO_ASYNC_INTERFACE</value>
    </values>
  </entry>

  <entry id="pio_debug_level" modify_via_xml="PIO_DEBUG_LEVEL">
    <type>integer</type>
    <category>pio</category>
    <group>pio_default_inparm</group>
    <valid_values>0,1,2,3,4,5,6</valid_values>
    <desc>
      pio debug level
      valid values: 0,1,2,3,4,5,6
    </desc>
    <values>
      <value>$PIO_DEBUG_LEVEL</value>
    </values>
  </entry>

  <entry id="pio_blocksize" modify_via_xml="PIO_BLOCKSIZE">
    <type>integer</type>
    <category>pio</category>
    <group>pio_default_inparm</group>
    <desc>
      blocksize for pio box rearranger
    </desc>
    <values>
      <value>$PIO_BLOCKSIZE</value>
    </values>
  </entry>

  <entry id="pio_buffer_size_limit" modify_via_xml="PIO_BUFFER_SIZE_LIMIT">
    <type>integer</type>
    <category>pio</category>
    <group>pio_default_inparm</group>
    <desc>
      pio buffer size limit
    </desc>
    <values>
      <value>$PIO_BUFFER_SIZE_LIMIT</value>
    </values>
  </entry>

  <entry id="pio_rearr_comm_type" modify_via_xml="PIO_REARR_COMM_TYPE">
    <type>char</type>
    <category>pio</category>
    <group>pio_default_inparm</group>
    <valid_values>p2p,coll,default</valid_values>
    <desc>
      pio rearranger communication type.
      valid values: p2p, coll, default
    </desc>
    <values>
      <value>$PIO_REARR_COMM_TYPE</value>
    </values>
  </entry>

  <entry id="pio_rearr_comm_fcd" modify_via_xml="PIO_REARR_COMM_FCD">
    <type>char</type>
    <category>pio</category>
    <group>pio_default_inparm</group>
    <valid_values>2denable,io2comp,comp2io,disable,default</valid_values>
    <desc>
      pio rearranger communication flow control direction.
    </desc>
    <values>
      <value>$PIO_REARR_COMM_FCD</value>
    </values>
  </entry>

  <entry id="pio_rearr_comm_max_pend_req_comp2io" modify_via_xml=" PIO_REARR_COMM_MAX_PEND_REQ_COMP2IO">
    <type>integer</type>
    <category>pio</category>
    <group>pio_default_inparm</group>
    <desc>
      pio rearranger communication max pending req (comp2io)
    </desc>
    <values>
      <value>$PIO_REARR_COMM_MAX_PEND_REQ_COMP2IO</value>
    </values>
  </entry>

  <entry id="pio_rearr_comm_enable_hs_comp2io" modify_via_xml="PIO_REARR_COMM_ENABLE_HS_COMP2IO">
    <type>logical</type>
    <category>pio</category>
    <group>pio_default_inparm</group>
    <desc>
      pio rearranger communication option: Enable handshake (comp2io)
    </desc>
    <values>
      <value>$PIO_REARR_COMM_ENABLE_HS_COMP2IO</value>
    </values>
  </entry>

  <entry id="pio_rearr_comm_enable_isend_comp2io"    modify_via_xml="PIO_REARR_COMM_ENABLE_ISEND_COMP2IO">
    <type>logical</type>
    <category>pio</category>
    <group>pio_default_inparm</group>
    <desc>
      pio rearranger communication option: Enable isends (comp2io)
    </desc>
    <values>
      <value>$PIO_REARR_COMM_ENABLE_ISEND_COMP2IO</value>
    </values>
  </entry>

  <entry id="pio_rearr_comm_max_pend_req_io2comp"    modify_via_xml="PIO_REARR_COMM_MAX_PEND_REQ_IO2COMP">
    <type>integer</type>
    <category>pio</category>
    <group>pio_default_inparm</group>
    <desc>
      pio rearranger communication max pending req (io2comp)
    </desc>
    <values>
      <value>$PIO_REARR_COMM_MAX_PEND_REQ_IO2COMP</value>
    </values>
  </entry>

  <entry id="pio_rearr_comm_enable_hs_io2comp"    modify_via_xml="PIO_REARR_COMM_ENABLE_HS_IO2COMP">
    <type>logical</type>
    <category>pio</category>
    <group>pio_default_inparm</group>
    <desc>
      pio rearranger communication option: Enable handshake (io2comp)
    </desc>
    <values>
      <value>$PIO_REARR_COMM_ENABLE_HS_IO2COMP</value>
    </values>
  </entry>

  <entry id="pio_rearr_comm_enable_isend_io2comp">
    <type>logical</type>
    <category>pio</category>
    <group>pio_default_inparm</group>
    <desc>
      pio rearranger communication option: Enable isends (io2comp)
      default: .false.
    </desc>
    <values>
      <value>$PIO_REARR_COMM_ENABLE_ISEND_IO2COMP</value>
    </values>
  </entry>

  <entry id="drv_flds_in_files" skip_default_entry="true">
    <type>char(10)</type>
    <category>drv_physics</category>
    <group>default_settings</group>
    <desc>
      List of files to merge together that contains drv_flds_in namelists
      The paths are relative to the case directory. drv_flds_in include the namelists that
      the driver reads and gives information on additional fields to be passed to different
      components that need to look at the same data.
    </desc>
    <values>
      <value>Buildconf/camconf/drv_flds_in,Buildconf/clmconf/drv_flds_in</value>
    </values>
  </entry>

</entry_id>

